name: Check Images for ECR Mirror

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

jobs:
  check-images:
    # Only run for PRs with [DEVOPS-1094] in title
    if: startsWith(github.event.pull_request.title, '[DEVOPS-1094]')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Setup yq
        uses: mikefarah/yq@master

      - name: Get changed files
        id: changed-files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PR_NUM="${{ github.event.pull_request.number }}"

          # Get list of changed files
          CHANGED_FILES=$(gh pr view $PR_NUM --json files -q '.files[].path')

          # Filter for Chart.yaml files
          CHART_FILES=$(echo "$CHANGED_FILES" | grep -E 'Chart\.yaml$' || true)

          if [[ -z "$CHART_FILES" ]]; then
            echo "No Chart.yaml files changed"
            echo "chart_files=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found Chart.yaml files:"
          echo "$CHART_FILES"

          # Save chart files for next step
          echo "$CHART_FILES" > /tmp/chart_files.txt
          echo "has_charts=true" >> $GITHUB_OUTPUT

      - name: Extract images from Helm charts
        if: steps.changed-files.outputs.has_charts == 'true'
        id: extract-images
        run: |
          # Initialize arrays to store chart-specific data
          > /tmp/chart_images.json
          echo "[]" > /tmp/chart_images.json

          while IFS= read -r chart_file; do
            if [[ -z "$chart_file" ]]; then
              continue
            fi

            echo "Processing: $chart_file"
            CHART_DIR=$(dirname "$chart_file")

            cd "$CHART_DIR"

            # Update dependencies
            echo "Running helm dependency update in $CHART_DIR..."
            if helm dependency update; then
              echo "✅ Dependencies updated successfully"
            else
              echo "⚠️ Dependency update failed, continuing anyway..."
            fi

            # Template the chart and extract images
            echo "Running helm template to extract images..."

            # Use yq to properly parse YAML and extract image fields
            # This handles both quoted and unquoted images
            IMAGES=$(helm template . 2>/dev/null | yq eval '.. | select(has("image")) | .image' - 2>/dev/null | grep -v '^null$' | sort -u || true)

            # Fallback to grep if yq doesn't find anything
            if [[ -z "$IMAGES" ]]; then
              echo "Trying fallback grep method..."
              IMAGES=$(helm template . 2>/dev/null | grep -E '^\s*-?\s*image:\s*' | sed -E 's/.*image:\s*"?([^"]+)"?.*/\1/' | sort -u || true)
            fi

            if [[ -n "$IMAGES" ]]; then
              echo "Found images in $CHART_DIR:"
              echo "$IMAGES"

              # Store chart path and images in JSON format
              while IFS= read -r image; do
                if [[ -n "$image" ]]; then
                  echo "{\"chart\": \"$chart_file\", \"image\": \"$image\"}" >> /tmp/chart_images_raw.txt
                fi
              done <<< "$IMAGES"
            else
              echo "No images found in $CHART_DIR"
            fi

            cd "$GITHUB_WORKSPACE"
          done < /tmp/chart_files.txt

          # Check if we found any images
          if [[ ! -f /tmp/chart_images_raw.txt ]]; then
            echo "No images found"
            echo "has_images=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Convert to proper JSON array
          jq -s '.' /tmp/chart_images_raw.txt > /tmp/chart_images.json

          echo "All chart images (with sources):"
          cat /tmp/chart_images.json | jq -r '.[] | "\(.chart): \(.image)"'

          # Also create a simple list for backward compatibility
          cat /tmp/chart_images.json | jq -r '.[].image' | sort -u > /tmp/images.txt

          echo "has_images=true" >> $GITHUB_OUTPUT

      - name: Save images as artifact
        if: steps.extract-images.outputs.has_images == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: docker-images-pr-${{ github.event.pull_request.number }}
          path: |
            /tmp/images.txt
            /tmp/chart_images.json
          retention-days: 30

      - name: Comment on PR
        if: steps.extract-images.outputs.has_images == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          ECR_REGISTRY: "123456789012.dkr.ecr.us-east-1.amazonaws.com"
          ECR_PREFIX: "mirror"
        run: |
          PR_NUM="${{ github.event.pull_request.number }}"

          # Build comment body
          cat > /tmp/comment.md <<'EOF'
          ## 🐳 Docker Images Detected

          The following Docker images were found in the Helm charts and will be mirrored to ECR:

          ### Images by Chart

          EOF

          # Group images by chart - process line by line to avoid subshell issues
          CURRENT_CHART=""
          while IFS='|' read -r chart image; do
            if [[ "$chart" != "$CURRENT_CHART" ]]; then
              echo "" >> /tmp/comment.md
              echo "**\`$chart\`**" >> /tmp/comment.md
              echo "" >> /tmp/comment.md
              echo "| Original Image | ECR Mirror Destination |" >> /tmp/comment.md
              echo "|---------------|------------------------|" >> /tmp/comment.md
              CURRENT_CHART="$chart"
            fi
            ECR_IMAGE="${ECR_REGISTRY}/${ECR_PREFIX}/${image}"
            echo "| \`${image}\` | \`${ECR_IMAGE}\` |" >> /tmp/comment.md
          done < <(cat /tmp/chart_images.json | jq -r '.[] | "\(.chart)|\(.image)"')

          cat >> /tmp/comment.md <<'EOF'

          ---

          ### ⚠️ Important Notice

          **DO NOT MERGE THIS PR YET**

          Once this PR receives **1 approval review**, the image(s) above will be automatically mirrored to ECR.

          After the mirroring process completes, another automated comment will be posted confirming that it is safe to merge this PR.

          ### Next Steps
          1. Review the images above
          2. Approve this PR to trigger mirroring
          3. Wait for automated mirroring confirmation
          4. Merge once confirmed safe

          ---
          🤖 *This comment was automatically generated by the Check Images workflow*
          EOF

          # Post comment
          gh pr comment $PR_NUM --body-file /tmp/comment.md

          echo "✅ Comment posted to PR #$PR_NUM"
